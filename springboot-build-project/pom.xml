<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<!--    该Pom文件是遵循相关版本的规则-->
    <modelVersion>4.0.0</modelVersion>

<!--    引用SpringBoot框架作为父框架（即是SpringBoot的相关组件都默认使用该父框架中的组件）-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.4</version>
    </parent>

<!--    三要素：Maven的远程（或本地地址）  模块名称  模块版本号-->
    <groupId>com.example</groupId>
    <artifactId>springboot-build-project</artifactId>
    <version>0.0.1-SNAPSHOT</version>

<!--    模块别名  模块描述-->
    <name>springboot-build-project</name>
    <description>Build project for Spring Boot</description>

<!--    模块打包方式（没有任何逻辑即是pom文件）-->
    <packaging>pom</packaging>

    <!--    properties可以管理同该依赖下POM的版本号-->
    <properties>
        <!--    修改SpringBoot中的jdk版本号-->
        <java.version>1.8</java.version>
        <!--    修改fastjson的版本号-->
        <alibaba.fastjson.version>1.2.68</alibaba.fastjson.version>
    </properties>

    <!--    子模块-->
    <modules>
        <module>log-module</module>
        <module>junit-module</module>
        <module>web-module</module>
    </modules>


    <dependencies>
        <!--        SpringBoot项目启动类-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

<!--        web项目启动器器-->
<!--        正是这个依赖，让SpringBoot有了本项目的Web容器（默认Tomcat）-->
<!--        而不用配置另外的Tomcat进行部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--     JSON格式化的依赖包-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${alibaba.fastjson.version}</version>
        </dependency>

        <!--        引入lombok 使用@Data注解  使用@Slf4j注解-->
<!--        <dependency>-->
<!--            <groupId>org.projectlombok</groupId>-->
<!--            <artifactId>lombok</artifactId>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-test</artifactId>-->
<!--            <scope>test</scope>-->
<!--            &lt;!&ndash;         在使用Junit5的同时   排除junit4单元测试的maven包 &ndash;&gt;-->
<!--            &lt;!&ndash;            实际上不影响 Junit4的使用 因为&ndash;&gt;-->
<!--            <exclusions>-->
<!--                <exclusion>-->
<!--                    <groupId>org.junit.vintage</groupId>-->
<!--                    <artifactId>junit-vintage-engine</artifactId>-->
<!--                </exclusion>-->
<!--            </exclusions>-->
<!--        </dependency>-->

<!--&lt;!&ndash;          Junit4 动态设置Junit4只能作用在Test目录&ndash;&gt;-->
<!--        <dependency>-->
<!--            <groupId>junit</groupId>-->
<!--            <artifactId>junit</artifactId>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
    </dependencies>

    <build>
        <plugins>
            <!--            SpringBoot自带的Maven打包插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
